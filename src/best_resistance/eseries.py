
from best_resistance.types import Resistor


def generate_e_series(n: int, min_decade: int = 0, max_decade: int = 6) -> list[Resistor]:
    """Generate the E-series resistor values for a given series number across multiple decades.

    Args:
        n (int): The E-series number (e.g., 6, 12, 24, 48, 96).
        min_decade (int): The minimum decade exponent (inclusive).
        max_decade (int): The maximum decade exponent (exclusive).
    """
    e_series: list[Resistor] = [Resistor('0', 0)]
    assert min_decade < max_decade, "Minimum decade must be less than the maximum"
    assert -3 <= min_decade < 12, "Minimum decade must be between -3 and 12"
    assert -3 <= max_decade < 12, "Maximum decade must be between -3 and 12"
    
    # Define standard E-series base values
    # Keep these as strings to avoid rounding
    E_SERIES_TABLES = {
        6:  ['1.0', '1.5', '2.2', '3.3', '4.7', '6.8'],
        12: ['1.0', '1.2', '1.5', '1.8', '2.2', '2.7', '3.3', '3.9', '4.7', '5.6', '6.8', '8.2'],
        24: ['1.0', '1.1', '1.2', '1.3', '1.5', '1.6', '1.8', '2.0', '2.2', '2.4', '2.7', '3.0',
             '3.3', '3.6', '3.9', '4.3', '4.7', '5.1', '5.6', '6.2', '6.8', '7.5', '8.2', '9.1'],
        48: ['1.00', '1.05', '1.10', '1.15', '1.21', '1.27', '1.33', '1.40', '1.47', '1.54', '1.62', '1.69',
             '1.78', '1.87', '1.96', '2.05', '2.15', '2.26', '2.37', '2.49', '2.61', '2.74', '2.87', '3.01',
             '3.16', '3.32', '3.48', '3.65', '3.83', '4.02', '4.22', '4.42', '4.64', '4.87', '5.11', '5.36',
             '5.62', '5.90', '6.19', '6.49', '6.81', '7.15', '7.50', '7.87', '8.25', '8.66', '9.09', '9.53'],
        96: ['1.00', '1.02', '1.05', '1.07', '1.10', '1.13', '1.15', '1.18', '1.21', '1.24', '1.27', '1.30',
             '1.33', '1.37', '1.40', '1.43', '1.47', '1.50', '1.54', '1.58', '1.62', '1.65', '1.69', '1.74',
             '1.78', '1.82', '1.87', '1.91', '1.96', '2.00', '2.05', '2.10', '2.15', '2.21', '2.26', '2.32',
             '2.37', '2.43', '2.49', '2.55', '2.61', '2.67', '2.74', '2.80', '2.87', '2.94', '3.01', '3.09',
             '3.16', '3.24', '3.32', '3.40', '3.48', '3.57', '3.65', '3.74', '3.83', '3.92', '4.02', '4.12',
             '4.22', '4.32', '4.42', '4.53', '4.64', '4.75', '4.87', '4.99', '5.11', '5.23', '5.36', '5.49',
             '5.62', '5.76', '5.90', '6.04', '6.19', '6.34', '6.49', '6.65', '6.81', '6.98', '7.15', '7.32',
             '7.50', '7.68', '7.87', '8.06', '8.25', '8.45', '8.66', '8.87', '9.09', '9.31', '9.53', '9.76'],
        192: ['1.00', '1.01', '1.02', '1.04', '1.05', '1.06', '1.07', '1.09', '1.10', '1.11', '1.13', '1.14',
              '1.15', '1.17', '1.18', '1.19', '1.21', '1.22', '1.23', '1.25', '1.26', '1.27', '1.29', '1.30',
              '1.31', '1.33', '1.34', '1.36', '1.37', '1.39', '1.40', '1.42', '1.43', '1.45', '1.47', '1.48',
              '1.50', '1.51', '1.53', '1.54', '1.56', '1.58', '1.59', '1.61', '1.62', '1.64', '1.65', '1.67',
              '1.69', '1.71', '1.72', '1.74', '1.76', '1.78', '1.80', '1.82', '1.83', '1.85', '1.87', '1.89',
              '1.91', '1.93', '1.96', '1.98', '2.00', '2.02', '2.04', '2.06', '2.09', '2.11', '2.13', '2.15',
              '2.18', '2.20', '2.22', '2.25', '2.27', '2.29', '2.32', '2.34', '2.37', '2.39', '2.42', '2.44',
              '2.47', '2.49', '2.52', '2.55', '2.57', '2.60', '2.63', '2.66', '2.69', '2.72', '2.74', '2.77',
              '2.80', '2.83', '2.86', '2.89', '2.92', '2.95', '2.98', '3.01', '3.04', '3.07', '3.10', '3.13',
              '3.16', '3.19', '3.23', '3.26', '3.29', '3.32', '3.36', '3.39', '3.42', '3.46', '3.49', '3.53',
              '3.56', '3.60', '3.63', '3.67', '3.71', '3.74', '3.78', '3.82', '3.86', '3.90', '3.94', '3.98',
              '4.02', '4.06', '4.10', '4.14', '4.18', '4.22', '4.26', '4.30', '4.34', '4.38', '4.42', '4.47',
              '4.51', '4.55', '4.60', '4.64', '4.69', '4.73', '4.78', '4.83', '4.87', '4.92', '4.97', '5.01',
              '5.06', '5.11', '5.16', '5.21', '5.26', '5.31', '5.36', '5.42', '5.47', '5.52', '5.58', '5.63',
              '5.69', '5.75', '5.80', '5.86', '5.92', '5.98', '6.04', '6.10', '6.16', '6.22', '6.28', '6.34',
              '6.40', '6.46', '6.53', '6.59', '6.65', '6.72', '6.78', '6.85', '6.92', '6.98', '7.05', '7.12',
              '7.19', '7.26', '7.32', '7.39', '7.46', '7.53', '7.60', '7.67', '7.74', '7.81', '7.88', '7.96',
              '8.03', '8.10', '8.18', '8.25', '8.33', '8.40', '8.48', '8.56', '8.64', '8.72', '8.80', '8.87',
              '8.95', '9.03', '9.12', '9.20', '9.28', '9.36', '9.45', '9.53', '9.62', '9.71', '9.80', '9.89'],
    }

    def swizzle0(s: str):
        """The exponent mod 3 is zero, so just return it"""
        assert len(s) in [3, 4], "String value of resistances must be 3 or 4."
        return s
    
    def swizzle1(s: str):
        """The exponent mod 3 is one. 1.0 -> 10, 1.03 -> 10.3"""
        assert len(s) in [3, 4], "String value of resistances must be 3 or 4."
        if len(s) == 3:
            return s[0] + s[2]
        else:
            return s[0] + s[2] + '.' + s[3:]
    
    def swizzle2(s: str) -> str:
        """The exponent mod 3 is two. '1.0'-> 100, 1.03 -> 103"""
        assert len(s) in [3, 4], "String value of resistances must be 3 or 4."
        if len(s) == 3:
            return s.replace('.', '') + '0'
        else:
            return s.replace('.', '')

    if n not in E_SERIES_TABLES:
        raise ValueError(f"E-series table for n={n} is not defined.")

    base_values = E_SERIES_TABLES[n]
    for decade in range(min_decade, max_decade):
        # build the string form
        si_mult = ['m', '', 'k', 'M', 'G'][(decade // 3) + 1]
        swizzle = [swizzle0, swizzle1, swizzle2][decade % 3]
        mult = 10**decade
        suffix = 'Î©'
        suffix = ''

        for value in base_values:
            e_series.append(Resistor(swizzle(value) + si_mult + suffix, float(value)*mult))
    return e_series
